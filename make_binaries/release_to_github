#!/bin/bash

# FIRST : Run make_binaries/build on checked out tag

# SECOND, MODIFY  Release Notes (edit first part before "### About ...")
read -r -d '' RELEASE_NOTES << ---

Changes :

* Pragma-merge -- dialog to warn about binary files
* Pragma-merge -- fixed color-theme bug
* Pragma-merge -- add viewing of new files from status list of changed files
* Pragma-merge -- Improve merge color scheme for better readibility
* Conflict resolution -- allow skipping files temporarily (you need to go back later)
* Conflict resolution -- improve functionality for [Undo Merge] button
* Graph-window -- fix bug in selection of found commit
* Select off-branch commit in Graph window now displays correct message in main window
* Settings-window -- speedup
* Settings-window -- add Fork dialog
* Main-window -- speedup
* Main-window -- allow huge number of uncommitted files (some other git clients crashes)
* Bug fix -- MacOS menu item is now removed for closed Notes window
* Log improved for developers. Log code line-numbers for main-window callbacks, and for git-commands


___
### About Pragma-git
The aim with Pragma-git is to be
- ”pragmatic” — aiming to be the opposite to how many beginners perceive git
- easy to start — and something to grow in for daily programming tasks
- friendly — guiding you through risks of data loss with pop-up warnings and instructions

Read more on the home page : https://pragma-git.github.io

### Quick Install

Or download the *one* installer that matches your system from the "__*assets*__" link below.

___
### Install

Windows : just run installer.
MacOS : ***Important*** -- follow "README.txt" on disk image. 
Linux - [read instructions](https://pragma-git.github.io#installation)

___
### Changes
$CHANGES
___
### About Pragma-git
The aim with Pragma-git is to be
- ”pragmatic” — aiming to be the opposite to how many beginners perceive git
- easy to start — and something to grow in for daily programming tasks
- friendly — guiding you through risks of data loss with pop-up warnings and instructions

Read more on the home page : https://pragma-git.github.io

---




# NOTE : If header name in https://pragma-git.github.io is changed, its element id will be changed.  
# Modify link above from "installation" to new id (the id can be found by from html-source of https://pragma-git.github.io).


TOKEN_FILE="../../mytoken.txt"  #NOTE: Token requires scopes: repos, write:packages, admin:org, and maybe user
REPO=pragma-git/pragma-git

#
# Create Release and Upload binaries
#

    # Login
    echo 'LOG IN TO GITHUB'
    gh auth login --with-token < "$TOKEN_FILE"
    #gh auth login --web
    
    # Create Release
    echo 'CREATE RELEASE'
    gh release create \
      $TAG \
      --repo "$REPO" \
      --draft \
      --notes "$RELEASE_NOTES" \
      --title "$RELEASE_TITLE"
      
#    exit 0 # Stop here to test without uploading files
      
    # Upload binaries  
    echo 'UPLOAD BINARIES'
    cd '/Users/jan/Documents/Projects/Pragma-git/dist/'

    echo 'UPLOAD MAC (INTEL)'
    gh release upload  $TAG  --repo "$REPO"  "$(ls mac/Pragma-git*.dmg)" 
    
    echo 'UPLOAD MAC (ARM)'
    gh release upload  $TAG  --repo "$REPO"  "$(ls mac_arm64/Pragma-git*.dmg)" 
    
    echo 'UPLOAD WINDOWS'
    gh release upload  $TAG  --repo "$REPO"  "$(ls win64/Pragma-git*.exe)" 
    
    echo 'UPLOAD LINUX DEB'
    gh release upload  $TAG  --repo "$REPO"  "$(ls linux64/Pragma-git*.deb)" 
    
    echo 'UPLOAD LINUX RPM'
    gh release upload  $TAG  --repo "$REPO"  "$(ls linux64/Pragma-git*.rpm)" 

#
# DONE
#
    echo ' '
    echo '=====' 
    echo 'DONE '
    echo '====='     

    read -n 1 -s -r -p "DONE : Press any key to continue" && echo ' '
